import OpenAI from "openai";
import { airtableService } from "./airtable-service";

// the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user
const openai = new OpenAI({ 
  apiKey: process.env.OPENAI_API_KEY 
});

export interface ArticleGenerationRequest {
  keywords: string[];
  topic?: string;
  contentType: string; // newsletter, tiktok, instagram, xtwitter, youtube, facebook, blog
  targetAudience?: string;
  tone?: string;
  existingContent?: string;
}

export interface GeneratedArticle {
  title: string;
  content: string;
  suggestions: string[];
}

export class OpenAIService {
  
  /**
   * R√©cup√®re le prompt syst√®me actif depuis Airtable ou utilise un fallback
   */
  private async getSystemPrompt(): Promise<{ systemMessage: string; outputStructure: string }> {
    try {
      console.log('üîç R√©cup√©ration du prompt syst√®me actif depuis Airtable...');
      const activePrompt = await airtableService.getActiveSystemPrompt();
      
      if (activePrompt && activePrompt.promptSystem) {
        console.log('‚úÖ Prompt syst√®me actif r√©cup√©r√©:', activePrompt.nom || 'Sans nom');
        return {
          systemMessage: activePrompt.promptSystem,
          outputStructure: activePrompt.structureSortie || ''
        };
      } else {
        console.log('‚ö†Ô∏è Aucun prompt syst√®me actif trouv√©, utilisation du prompt par d√©faut');
        return {
          systemMessage: "Tu es un expert en cr√©ation de contenu √©ditorial et SEO. R√©ponds toujours en JSON valide avec les champs demand√©s.",
          outputStructure: ''
        };
      }
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration du prompt syst√®me, utilisation du fallback:', error);
      return {
        systemMessage: "Tu es un expert en cr√©ation de contenu √©ditorial et SEO. R√©ponds toujours en JSON valide avec les champs demand√©s.",
        outputStructure: ''
      };
    }
  }

  /**
   * G√©n√®re ou r√©g√©n√®re un article avec GPT-4o bas√© sur les mots-cl√©s et param√®tres
   */
  async generateArticle(request: ArticleGenerationRequest): Promise<GeneratedArticle> {
    try {
      // R√©cup√©rer le prompt syst√®me depuis Airtable
      const { systemMessage, outputStructure } = await this.getSystemPrompt();
      
      const isRegeneration = !!request.existingContent;
      
      let prompt = "";
      
      // Int√©grer la structure de sortie si disponible
      const outputFormat = outputStructure || `{
  "title": "Titre ${isRegeneration ? 'optimis√©' : 'accrocheur'} du contenu",
  "content": "Contenu ${isRegeneration ? 'r√©g√©n√©r√© et optimis√©' : 'complet g√©n√©r√©'}",
  "suggestions": ["3 suggestions d'${isRegeneration ? 'am√©lioration sp√©cifiques' : 'optimisation SEO'}"]
}`;
      
      if (isRegeneration) {
        prompt = `R√©g√©n√®re et am√©liore ce contenu existant en l'optimisant pour les mots-cl√©s fournis.

Contenu existant : "${request.existingContent}"

Type de contenu : ${request.contentType}
Mots-cl√©s √† optimiser : ${request.keywords.join(', ')}
${request.targetAudience ? `Public cible : ${request.targetAudience}` : ''}
${request.tone ? `Ton souhait√© : ${request.tone}` : ''}

Instructions :
- Am√©liore le contenu existant tout en gardant l'intention originale
- Int√®gre naturellement les mots-cl√©s fournis
- Optimise pour le SEO sans sacrifier la qualit√©
- Garde un style engageant et authentique
- Adapte la longueur au type de contenu (court pour Twitter/Instagram, plus long pour articles/newsletters)

R√©ponds en JSON avec ce format exact :
${outputFormat}`;
      } else {
        prompt = `G√©n√®re un nouveau contenu optimis√© bas√© sur les param√®tres fournis.

Type de contenu : ${request.contentType}
Mots-cl√©s principaux : ${request.keywords.join(', ')}
${request.topic ? `Sujet principal : ${request.topic}` : ''}
${request.targetAudience ? `Public cible : ${request.targetAudience}` : ''}
${request.tone ? `Ton souhait√© : ${request.tone}` : ''}

Instructions :
- Cr√©e un contenu original et engageant
- Int√®gre naturellement les mots-cl√©s fournis
- Optimise pour le SEO sans sur-optimisation
- Adapte le style et la longueur au type de contenu
- Utilise un langage accessible et captivant

R√©ponds en JSON avec ce format exact :
${outputFormat}`;
      }

      const response = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: systemMessage
          },
          {
            role: "user",
            content: prompt
          }
        ],
        response_format: { type: "json_object" },
        temperature: 0.7,
        max_tokens: 2000
      });

      const result = JSON.parse(response.choices[0].message.content || '{}');
      
      return {
        title: result.title || 'Titre g√©n√©r√©',
        content: result.content || 'Contenu g√©n√©r√©',
        suggestions: result.suggestions || []
      };

    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration avec OpenAI:', error);
      throw new Error(`Impossible de g√©n√©rer le contenu: ${error instanceof Error ? error.message : 'Erreur inconnue'}`);
    }
  }

  /**
   * G√©n√®re des suggestions de mots-cl√©s bas√©es sur un sujet
   */
  async suggestKeywords(topic: string, contentType: string): Promise<string[]> {
    try {
      // R√©cup√©rer le prompt syst√®me depuis Airtable (avec un fallback sp√©cialis√© pour les mots-cl√©s)
      const { systemMessage } = await this.getSystemPrompt();
      
      // Si le prompt syst√®me est g√©n√©rique, utiliser un prompt sp√©cialis√© pour SEO
      const keywordSystemPrompt = systemMessage.includes('mots-cl√©s') || systemMessage.includes('SEO') 
        ? systemMessage 
        : "Tu es un expert SEO sp√©cialis√© dans la recherche de mots-cl√©s. R√©ponds toujours en JSON valide.";

      const prompt = `G√©n√®re une liste de mots-cl√©s pertinents pour un contenu de type "${contentType}" sur le sujet "${topic}".

Instructions :
- Propose 10 mots-cl√©s pertinents et recherch√©s
- Inclus des mots-cl√©s longue tra√Æne
- Adapte au contexte fran√ßais
- Privil√©gie les mots-cl√©s avec un bon potentiel SEO

R√©ponds en JSON avec ce format exact :
{
  "keywords": ["mot-cl√© 1", "mot-cl√© 2", ...]
}`;

      const response = await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [
          {
            role: "system",
            content: keywordSystemPrompt
          },
          {
            role: "user",
            content: prompt
          }
        ],
        response_format: { type: "json_object" },
        temperature: 0.5,
        max_tokens: 500
      });

      const result = JSON.parse(response.choices[0].message.content || '{}');
      return result.keywords || [];

    } catch (error) {
      console.error('Erreur lors de la suggestion de mots-cl√©s:', error);
      return [];
    }
  }

  /**
   * G√©n√®re une image avec DALL-E 3 bas√©e sur le contenu et le type
   */
  async generateImage(contentText: string, typeContent: string): Promise<{ imageUrl: string }> {
    try {
      // Cr√©er un prompt optimis√© pour DALL-E 3 bas√© sur le contenu et le type
      let imagePrompt = "";
      
      switch (typeContent) {
        case "xtwitter":
          imagePrompt = `Cr√©er une image moderne et engageante pour Twitter avec un style √©pur√© et professionnel. L'image doit illustrer visuellement le concept suivant : "${contentText}". Style : minimal, couleurs vives, typographie moderne, format carr√© optimis√© pour les r√©seaux sociaux.`;
          break;
        case "instagram":
          imagePrompt = `Cr√©er une image esth√©tique et visuellement attrayante pour Instagram. L'image doit repr√©senter de mani√®re cr√©ative et artistique : "${contentText}". Style : photography-like, couleurs satur√©es, composition √©quilibr√©e, format carr√©, tendance Instagram.`;
          break;
        case "facebook":
          imagePrompt = `Cr√©er une image accrocheuse pour Facebook qui illustre clairement : "${contentText}". Style : moderne, accessible, couleurs harmonieuses, format rectangulaire, adapt√© au partage social.`;
          break;
        case "tiktok":
          imagePrompt = `Cr√©er une image verticale et dynamique pour TikTok repr√©sentant : "${contentText}". Style : moderne, vibrant, couleurs vives, format vertical, tendance TikTok.`;
          break;
        case "youtube":
          imagePrompt = `Cr√©er une miniature YouTube accrocheuse illustrant : "${contentText}". Style : professionnel, couleurs vives, format rectangulaire, haute qualit√©.`;
          break;
        case "blog":
          imagePrompt = `Cr√©er une image d'en-t√™te de blog professionnelle illustrant : "${contentText}". Style : √©ditorial, moderne, couleurs neutres, format banni√®re, qualit√© web.`;
          break;
        case "newsletter":
          imagePrompt = `Cr√©er une image d'en-t√™te pour newsletter repr√©sentant : "${contentText}". Style : professionnel, clean, couleurs de marque, format email, lisible.`;
          break;
        default:
          imagePrompt = `Cr√©er une image moderne et professionnelle illustrant : "${contentText}". Style : clean, moderne, couleurs harmonieuses, haute qualit√©.`;
      }

      console.log('üé® G√©n√©ration d\'image avec DALL-E 3 - Prompt:', imagePrompt);

      const response = await openai.images.generate({
        model: "dall-e-3",
        prompt: imagePrompt,
        n: 1,
        size: "1024x1024",
        quality: "standard",
        style: "vivid",
      });

      const imageUrl = response.data[0].url;
      
      if (!imageUrl) {
        throw new Error("Aucune URL d'image retourn√©e par DALL-E 3");
      }

      return { imageUrl };

    } catch (error) {
      console.error('Erreur lors de la g√©n√©ration d\'image avec DALL-E 3:', error);
      throw error;
    }
  }

  /**
   * Teste la connexion √† l'API OpenAI
   */
  async testConnection(): Promise<boolean> {
    try {
      await openai.chat.completions.create({
        model: "gpt-4o",
        messages: [{ role: "user", content: "Test de connexion" }],
        max_tokens: 10
      });
      return true;
    } catch (error) {
      console.error('Erreur de connexion OpenAI:', error);
      return false;
    }
  }
}

export const openaiService = new OpenAIService();